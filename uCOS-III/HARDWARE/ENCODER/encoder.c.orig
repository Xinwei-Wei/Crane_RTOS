#include "encoder.h"
#include "freecars.h"
#include "stm32f4xx_gpio.h"
#include "math.h"
#include "led.h"
#include "control.h"
#include "key.h"
#include "adc.h"
#include "usart.h"
#include "oled.h"
#include "beep.h"
#include "delay.h"
#include "ina226.h"

u8 H, L;
u16 value;
int count = 0;
float voltage1, voltage0;
float v;
float sum, SUM;
float val[50], max, min, MAX, MIN;
int j, k, l;
float value_current[12];
u8 Last_count;

/**************************************************************************
函数功能：把TIM2初始化为编码器接口模式
入口参数：无
返回  值：无
**************************************************************************/
void Encoder_Init_TIM2(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;  //时基设置
    TIM_ICInitTypeDef TIM_ICInitStructure;  //输入捕获
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);//使能定时器2的时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);//使能PA端口时钟
//GPIO设置为输入
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;	//端口配置
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF ; //浮空输入
    GPIO_InitStructure.GPIO_Speed  = GPIO_Speed_100MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);					      //根据设定参数初始化GPIOA

    GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2); //
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2); //

//定时器设置  （时基）
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);//配置为默认模式
    TIM_TimeBaseStructure.TIM_Prescaler = 0; // 预分频器
    TIM_TimeBaseStructure.TIM_Period = ENCODER_TIM_PERIOD; //设定计数器自动重装值65535
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;//选择时钟分频：不分频
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;////TIM向上计数
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
//编码器模式设置	（输入捕获）
    TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);//使用编码器模式3
    TIM_ICStructInit(&TIM_ICInitStructure);
    TIM_ICInitStructure.TIM_ICFilter = 10;//每多少微秒采样一次，采样N次，如果都是高电平或低电平则记一次输出
    TIM_ICInit(TIM2, &TIM_ICInitStructure);
    TIM_ClearFlag(TIM2, TIM_FLAG_Update);//清除TIM的更新标志位
    //溢出中断设置
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

    //Reset counter
    TIM_SetCounter(TIM2, 0);
    TIM_Cmd(TIM2, ENABLE);
}

void Encoder_Init_TIM2_back(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;  //时基设置
    TIM_ICInitTypeDef TIM_ICInitStructure;  //输入捕获
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);//使能定时器2的时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);//使能PA端口时钟
//GPIO设置为输入
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;	//端口配置
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF ; //浮空输入
    GPIO_InitStructure.GPIO_Speed  = GPIO_Speed_100MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);					      //根据设定参数初始化GPIOA

    GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2); //
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2); //

//定时器设置  （时基）
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);//配置为默认模式
    TIM_TimeBaseStructure.TIM_Prescaler = 0; // 预分频器
    TIM_TimeBaseStructure.TIM_Period = ENCODER_TIM_PERIOD; //设定计数器自动重装值65535
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;//选择时钟分频：不分频
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;////TIM向上计数
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
//编码器模式设置	（输入捕获）
    TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Falling, TIM_ICPolarity_Falling);//使用编码器模式3
    TIM_ICStructInit(&TIM_ICInitStructure);
    TIM_ICInitStructure.TIM_ICFilter = 10;//每多少微秒采样一次，采样N次，如果都是高电平或低电平则记一次输出
    TIM_ICInit(TIM2, &TIM_ICInitStructure);
    TIM_ClearFlag(TIM2, TIM_FLAG_Update);//清除TIM的更新标志位
    //溢出中断设置
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

    //Reset counter
    TIM_SetCounter(TIM2, 0);
    TIM_Cmd(TIM2, ENABLE);
}
/**************************************************************************
函数功能：把TIM4初始化为编码器接口模式
入口参数：无
返回  值：无
**************************************************************************/
void Encoder_Init_TIM4(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_ICInitTypeDef TIM_ICInitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);//使能定时器4的时钟
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);//使能PB端口时钟

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;	//端口配置
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF; //浮空输入
    GPIO_InitStructure.GPIO_Speed  = GPIO_Speed_100MHz;
    GPIO_Init(GPIOB, &GPIO_InitStructure);					      //根据设定参数初始化GPIOB

    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4); //第三路
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_TIM4); //第四路

    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    TIM_TimeBaseStructure.TIM_Prescaler = 0x0; // 预分频器
    TIM_TimeBaseStructure.TIM_Period = ENCODER_TIM_PERIOD; //设定计数器自动重装值
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;//选择时钟分频：不分频
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;////TIM向上计数
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

    TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);//使用编码器模式3
    TIM_ICStructInit(&TIM_ICInitStructure);   //初始填值
    TIM_ICInitStructure.TIM_ICFilter = 10;     //输入捕获筛选
    TIM_ICInit(TIM4, &TIM_ICInitStructure);
    TIM_ClearFlag(TIM4, TIM_FLAG_Update);//清除TIM的更新标志位
    TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
    //Reset counter
    TIM_SetCounter(TIM4, 0);
    TIM_Cmd(TIM4, ENABLE);
}

/**************************************************************************
函数功能：单位时间读取编码器计数
入口参数：定时器
返回  值：速度值
**************************************************************************/
int Read_Encoder(u8 TIMX)
{
    int Encoder_TIM;
    switch(TIMX)
    {
    case 2:
        Encoder_TIM = TIM2 -> CNT;
        TIM2 -> CNT = 0;
        break;
    case 3:
        Encoder_TIM = TIM3 -> CNT;
        TIM3 -> CNT = 0;
        break;
    case 4:
        Encoder_TIM = TIM4 -> CNT;
        TIM4 -> CNT = 0;
        break;
    default:
        Encoder_TIM = 0;
    }
    return Encoder_TIM;
}
/**************************************************************************
函数功能：TIM4中断服务函数
入口参数：无
返回  值：无
**************************************************************************/
//void TIM4_IRQHandler(void)
//{
//    if(TIM4->SR & 0X0001) //溢出中断
//    {

//    }
//    TIM4->SR &= ~(1 << 0); //清除中断标志位
//}
/**************************************************************************
函数功能：TIM2中断服务函数
入口参数：无
返回  值：无
**************************************************************************/
void TIM2_IRQHandler(void)
{
    if(TIM2->SR & 0X0001) //溢出中断
    {
    }
    TIM2->SR &= ~(1 << 0); //清除中断标志位
}

//初始化定时器3  Tout(us)=((arr+1)*(psc+1))/Tclk   Tclk输入时钟频率
void TIM3_Int_Init(u16 arr, u32 psc)  //999,8399  100ms
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //时钟使能

    TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	 计数到5000为500ms
    TIM_TimeBaseStructure.TIM_Prescaler = psc; //设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
//使能或者失能指定的TIM中断
    TIM_ITConfig( TIM3, TIM_IT_Update, ENABLE );

    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  //TIM3中断
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //先占优先级0级
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;  //从优先级3级
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
    NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器

    TIM_Cmd(TIM3, ENABLE);  //使能TIMx外设
}

//初始化定时器3  Tout(us)=((arr+1)*(psc+1))/Tclk   Tclk输入时钟频率
void TIM4_Int_Init(u16 arr, u32 psc)  //9999,8399  500ms
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE); //时钟使能

    TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	 计数到5000为500ms
    TIM_TimeBaseStructure.TIM_Prescaler = psc; //设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
//使能或者失能指定的TIM中断
    TIM_ITConfig( TIM4, TIM_IT_Update, ENABLE );

    NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;  //TIM3中断
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //先占优先级0级
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;  //从优先级3级
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
    NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器

    TIM_Cmd(TIM4, ENABLE);  //使能TIMx外设
}

void TIM3_IRQHandler(void)   //TIM3中断
{
    if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源
    {
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  //清除TIMx的中断待处理位:TIM 中断源
        Encoder_Left = TIM2->CNT / 4 ;  //四倍频还原
        TIM2->CNT = 0;
        CarSpeedCtr.Speed = Encoder_Left;   //编码器
        CarSpeedControl();  //速度控制
        TIM_SetCompare3(TIM5, CarSpeedCtr.CtrOut);	//修改比较值，修改占空比
        //printf("count:%d",Encoder_Left);
        push(1, CarSpeedCtr.SpeedSet); //理论值
        push(2, Encoder_Left); //实际测量值
        sendDataToScope();  //上位机
    }
}

//滤波法
float filter()
{
    sum = 0;
    for(j = 0; j < 10; j++)
    {
        Get_Shunt_voltage(&val[j]);
        val[j] = val[j] / 1000 * 10;
        //sum += val[j];
    }
    min = val[0];
    max = val[0];
    for(j = 0; j < 10; j++)
    {
        if(min > val[j])
            min = val[j];
        if(max < val[j])
            max = val[j];
    }
    //return (sum - max - min) / 10 + (max - min) ;
    //return max;
    return (max + min) / 2;
}


void TIM4_IRQHandler(void)
{
    if(TIM4->SR & 0X0001) //溢出中断
    {
//        value = Get_Adc(4);
//        H = value / 256;
//        L = value % 256;
//        voltage1 = ( H * 256 + L ) * 1.0 / 4095 * 3.3 * 1000;
        //Get_Shunt_Current(&voltage1);

//			SUM = 0;
//			  for(k =0 ;k < 12; k++)
//			{
//				value_current[k] = filter();
//				SUM += value_current[k];
//			}
//				voltage1 = SUM / 12;

//				Get_Shunt_voltage(&voltage1);
//				voltage1 = voltage1 / 1000 * 10;

        Get_Shunt_voltage(&val[j]);
        val[j] = val[j] / 1000 * 10;
        j++;
        if(j >= 20)
        {
            min = val[0];
            max = val[0];
            for(j = 0; j < 20; j++)
            {
                if(min > val[j])
                    min = val[j];
                if(max < val[j])
                    max = val[j];
            }
						voltage1 = (max + min) / 2;
						value_current[k++] = voltage1;
						MAX = value_current[0];
						MIN = value_current[0];
						for(l = 0; l < 5; l++)
						{
							MAX = MAX > value_current[l] ? MAX : value_current[l];
							MIN = MIN < value_current[l] ? MIN : value_current[l];
						}
						SUM += voltage1;
						push(3, (SUM - MAX - MIN )/ 3); //实际测量值
						push(4, 55);
						sendDataToScope();  //上位机
						printf(" current:%.1f mA ", voltage1);
						OLED_ShowDecimal(voltage1, 4, 1, 12, 32, 12);
						j = 0;
						k = k % 5;
						SUM -= value_current[k];				
        }
        //USART_SendData(USART1,value);
        if(v != 0)
        {
            if(voltage1 >= 1.5 * v || voltage1 <= 0.5 * v )
            {
                BEEP = 1;
//					delay_ms(500);
//					BEEP = !BEEP;
            }
            else
                BEEP = 0;
        }
        else
            BEEP = 0;
    }
    TIM4->SR &= ~(1 << 0); //清除中断标志位
}



